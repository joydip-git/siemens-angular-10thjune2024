1. JavaScript
2. TypeScript

3. Node JS


https://github.com/joydip-git/siemens-angular-10thjune2024


Chrome: V8 
firefox: spidermonkey
safari: JS Core

2009 => Ryan Dahl => Node JS
Angular JS 2010

deno

JS runtimes:
browser
node js, deno js, rhino js etc.


two phases of JS execution:
1. preparation stage: local variable and function declarations are registered/hoisted
Note: function expressions are not hoisted
you can't call function expressions before the expression
2. execution stage

ES6 (2015)

TypeScript:
a. static type checking
b. data typification

New features in ES6+:
1. let and const (ES6)
2. class, constructor, extends and super (ES6)
3. templated string (ES6)
4. ES6 modules
5. arrow function

transpilation:
a. JS code with ES6+ syntax to vanilla JS
b. TS code to vanilla JS

transpiler
a. JS code with ES6+ syntax to vanilla JS => babel
b. TS code to vanilla JS => typescript compiler (tsc)

package.json file:
command: >npm init [--yes]

typescript installation:
a. global installation:
command: >npm i typescript --location=global

b. applicaion specific installation:
dev dependency:
command: >npm i typescript -D (npm i typescript --save-dev)

complete dependency:
command: >npm i typescript (npm i typescript --save)

modules:
API for importing and exporting types from JS/TS/NS files

module formats:
a. ES6 module format [export/import]
b. common js module format [defalut format for Node JS]
person.js
class Person{}
module.exports ={ Person }

index.js
const {Person} = require('./person')

c. amd (asynchronous module definitio) format
define(['./person'],
function(){
	class Person{}
})

d. umd (universal module defnition) format

module loader:
require js [it ONLY understands AMD module format]
system js



header.html														header.js
<h2 (click)="clicked()">{{message}}</h2>		function header(){
																		this.message="Payroll App"
										   							const clicked=()=>{}
																		}


footer.html
<h3></h3>

panel.html
<nav>
	<a href="">Home</a>
	<a href="">Home</a>
	<a href="">Home</a>
</nav>

container.html
<div>
......
</div>










